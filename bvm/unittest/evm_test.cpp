// Copyright 2018 The Beam Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#define HOST_BUILD

#include "../../core/block_crypt.h"
#include "../../utility/test_helpers.h"
#include "../evm.h"

namespace ECC {

	void SetRandom(uintBig& x)
	{
		GenRandom(x);
	}

	void SetRandom(Scalar::Native& x)
	{
		Scalar s;
		while (true)
		{
			SetRandom(s.m_Value);
			if (!x.Import(s))
				break;
		}
	}

	void SetRandom(Key::IKdf::Ptr& pRes)
	{
		uintBig seed;
		SetRandom(seed);
		HKdf::Create(pRes, seed);
	}

}

int g_TestsFailed = 0;

void TestFailed(const char* szExpr, uint32_t nLine)
{
	printf("Test failed! Line=%u, Expression: %s\n", nLine, szExpr);
	g_TestsFailed++;
	fflush(stdout);
}

#define verify_test(x) \
	do { \
		if (!(x)) \
			TestFailed(#x, __LINE__); \
	} while (false)

#define fail_test(msg) TestFailed(msg, __LINE__)

namespace beam
{

	struct MyProcessor
		:public EvmProcessor
	{
		std::map<Word, Word> m_Storage;

		ByteBuffer m_CodeBuf;

		void SStore(const Word& key, const Word& w) override
		{
			if (w == Zero)
			{
				auto it = m_Storage.find(key);
				if (m_Storage.end() != it)
					m_Storage.erase(it);
			}
			else
				m_Storage[key] = w;
		}

		bool SLoad(const Word& key, Word& w) override
		{
			auto it = m_Storage.find(key);
			if (m_Storage.end() == it)
				return false;

			w = it->second;
			return true;
		}

		bool RunFull(const Word& wCaller, const Blob& args)
		{
			Reset();

			if (!m_CodeBuf.empty())
			{
				m_Code.m_p = &m_CodeBuf.front();
				m_Code.m_n = (uint32_t) m_CodeBuf.size();
			}

			m_Gas = 1000000000ULL;
			m_Args.m_Caller = wCaller;
			m_Args.m_Buf = args;

			while (ShouldRun())
				RunOnce();

			return State::Done == m_State;
		}

		bool Construct(const Word& wCaller, const char* szCode, uint32_t nLenCode, const void* pArg, uint32_t nArg)
		{
			Reset();

			uint32_t nSizeCode = nLenCode / 2;
			m_CodeBuf.resize(nSizeCode + nArg);
			if (nSizeCode)
			{
				auto ret = uintBigImpl::_Scan(&m_CodeBuf.front(), szCode, nLenCode);
				verify_test(ret == nLenCode);
				memcpy(&m_CodeBuf.front() + nSizeCode, pArg, nArg);
			}

			std::cout << "\nCtor" << std::endl;

			if (!RunFull(wCaller, Blob()))
				return false;

			// save retval as the remaining code, rerun
			m_RetVal.Export(m_CodeBuf);

			return true;
		}

		bool RunMethod(const Word& wCaller, const EvmProcessor::Method& m, uint32_t nSizeMethod)
		{
			std::cout << "\nCalling method " << m.m_Selector << std::endl;
			return RunFull(wCaller, Blob(&m, nSizeMethod));

		}

		template <typename TMethod>
		bool RunMethod_T(const Word& wCaller, const TMethod& m)
		{
			return RunMethod(wCaller, m, sizeof(m));
		}

	};


	void EvmTest1()
	{
		// storage example

/*
		pragma solidity >=0.7.0 <0.9.0;

		contract Storage {

			uint256 m_Num;

			function add(uint num) public returns (uint256) {
				uint256 val = m_Num;
				val += num;
				m_Num = val;
				return val;
				//m_Num += num;
				//return m_Num;
			}
		}
*/

		static const char szCode[] = "608060405234801561001057600080fd5b5060da8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631003e2d214602d575b600080fd5b603c60383660046066565b604e565b60405190815260200160405180910390f35b60008054605a8382607e565b60008190559392505050565b600060208284031215607757600080fd5b5035919050565b80820180821115609e57634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212207663ee6b0b30fe36e38ed6d65e28b6b9dbc407ec0e21a3a4c8213814e8bcf62864736f6c63430008110033";

		// owner example
		//static const char szCode[] = "608060405234801561001057600080fd5b5061005a6040518060400160405280601b81526020017f4f776e657220636f6e7472616374206465706c6f7965642062793a00000000008152503361009e60201b61011e1760201c565b600080546001600160a01b0319163390811782556040519091907f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735908290a361016c565b6100e782826040516024016100b492919061010c565b60408051601f198184030181529190526020810180516001600160e01b0390811663319af33360e01b179091526100eb16565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604081526000835180604084015260005b8181101561013a576020818701810151606086840101520161011d565b50600060608285018101919091526001600160a01b03949094166020840152601f01601f191690910190910192915050565b61024e8061017b6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063893d20e81461003b578063a6f9dae11461005a575b600080fd5b600054604080516001600160a01b039092168252519081900360200190f35b61006d610068366004610188565b61006f565b005b6000546001600160a01b031633146100c35760405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b604482015260640160405180910390fd5b600080546040516001600160a01b03808516939216917f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73591a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61016382826040516024016101349291906101b8565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610167565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60006020828403121561019a57600080fd5b81356001600160a01b03811681146101b157600080fd5b9392505050565b604081526000835180604084015260005b818110156101e657602081870181015160608684010152016101c9565b50600060608285018101919091526001600160a01b03949094166020840152601f01601f19169091019091019291505056fea2646970667358221220378e9cbf36d8ffe76ab726d44156b5d1cf4dc7eb34584a67e3f9317e9f6c30e964736f6c63430008110033";

		MyProcessor evm;

		EvmProcessor::Word wOwner;
		memset0(wOwner.m_pData, wOwner.nBytes - 20);
		memset(wOwner.m_pData + wOwner.nBytes - 20, 0xff, 20);

		verify_test(evm.Construct(wOwner, szCode, _countof(szCode) - 1, nullptr, 0));

#pragma pack (push, 1)
		struct MyMethod
			:public EvmProcessor::Method
		{
			EvmProcessor::Word m_MyValue;
		} myArg;
#pragma pack (pop)

		uint64_t valExpected = 0;
		for (uint32_t i = 0; i < 10; i++)
		{
			uint32_t valAdd = (i + 5) * 19;
			valExpected += valAdd;

			myArg.SetSelector("add(uint256)");
			myArg.m_MyValue = valAdd;

			verify_test(evm.RunMethod_T(wOwner, myArg));

			verify_test(sizeof(EvmProcessor::Word) == evm.m_RetVal.n);
			const auto& wRes = *(const EvmProcessor::Word*) evm.m_RetVal.p;

			verify_test(EvmProcessor::Word(valExpected) == wRes);

		}
	}

	void EvmTest2()
	{
		// demo voting contract
		static const char szCode[] = "60806040523480156200001157600080fd5b506040516200146c3803806200146c833981810160405281019062000037919062000243565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017657600260405180604001604052808484815181106200010f576200010e620003b3565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200016d9062000336565b915050620000e2565b505062000450565b6000620001956200018f84620002bd565b62000294565b90508083825260208201905082856020860282011115620001bb57620001ba62000416565b5b60005b85811015620001ef5781620001d488826200022c565b845260208401935060208301925050600181019050620001be565b5050509392505050565b600082601f83011262000211576200021062000411565b5b8151620002238482602086016200017e565b91505092915050565b6000815190506200023d8162000436565b92915050565b6000602082840312156200025c576200025b62000420565b5b600082015167ffffffffffffffff8111156200027d576200027c6200041b565b5b6200028b84828501620001f9565b91505092915050565b6000620002a0620002b3565b9050620002ae828262000300565b919050565b6000604051905090565b600067ffffffffffffffff821115620002db57620002da620003e2565b5b602082029050602081019050919050565b6000819050919050565b6000819050919050565b6200030b8262000425565b810181811067ffffffffffffffff821117156200032d576200032c620003e2565b5b80604052505050565b60006200034382620002f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000379576200037862000384565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200044181620002ec565b81146200044d57600080fd5b50565b61100c80620004606000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101145780639e7b8d6114610132578063a3ec138d1461014e578063e2ba53f01461018157610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da5780635c19a95c146100f8575b600080fd5b6100a760048036038101906100a29190610a01565b61019f565b005b6100c360048036038101906100be9190610a01565b6102e6565b6040516100d1929190610b95565b60405180910390f35b6100e261031a565b6040516100ef9190610b5f565b60405180910390f35b610112600480360381019061010d91906109d4565b61033e565b005b61011c6106da565b6040516101299190610c9e565b60405180910390f35b61014c600480360381019061014791906109d4565b610762565b005b610168600480360381019061016391906109d4565b610919565b6040516101789493929190610cb9565b60405180910390f35b610189610976565b6040516101969190610b7a565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561022a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022190610bbe565b60405180910390fd5b8060010160009054906101000a900460ff161561027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027390610bde565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600283815481106102bb576102ba610e2f565b5b906000526020600020906002020160010160008282546102db9190610d0f565b925050819055505050565b600281815481106102f657600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156103d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ca90610bfe565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990610c7e565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105b257600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a490610c3e565b60405180910390fd5b610443565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156106b5578160000154600282600201548154811061068957610688610e2f565b5b906000526020600020906002020160010160008282546106a99190610d0f565b925050819055506106d5565b81600001548160000160008282546106cd9190610d0f565b925050819055505b505050565b6000806000905060005b60028054905081101561075d57816002828154811061070657610705610e2f565b5b906000526020600020906002020160010154111561074a576002818154811061073257610731610e2f565b5b90600052602060002090600202016001015491508092505b808061075590610db7565b9150506106e4565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e790610c1e565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087790610c5e565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146108cf57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b600060026109826106da565b8154811061099357610992610e2f565b5b906000526020600020906002020160000154905090565b6000813590506109b981610fa8565b92915050565b6000813590506109ce81610fbf565b92915050565b6000602082840312156109ea576109e9610e5e565b5b60006109f8848285016109aa565b91505092915050565b600060208284031215610a1757610a16610e5e565b5b6000610a25848285016109bf565b91505092915050565b610a3781610d65565b82525050565b610a4681610d77565b82525050565b610a5581610d83565b82525050565b6000610a68601483610cfe565b9150610a7382610e63565b602082019050919050565b6000610a8b600e83610cfe565b9150610a9682610e8c565b602082019050919050565b6000610aae601283610cfe565b9150610ab982610eb5565b602082019050919050565b6000610ad1602883610cfe565b9150610adc82610ede565b604082019050919050565b6000610af4601983610cfe565b9150610aff82610f2d565b602082019050919050565b6000610b17601883610cfe565b9150610b2282610f56565b602082019050919050565b6000610b3a601e83610cfe565b9150610b4582610f7f565b602082019050919050565b610b5981610dad565b82525050565b6000602082019050610b746000830184610a2e565b92915050565b6000602082019050610b8f6000830184610a4c565b92915050565b6000604082019050610baa6000830185610a4c565b610bb76020830184610b50565b9392505050565b60006020820190508181036000830152610bd781610a5b565b9050919050565b60006020820190508181036000830152610bf781610a7e565b9050919050565b60006020820190508181036000830152610c1781610aa1565b9050919050565b60006020820190508181036000830152610c3781610ac4565b9050919050565b60006020820190508181036000830152610c5781610ae7565b9050919050565b60006020820190508181036000830152610c7781610b0a565b9050919050565b60006020820190508181036000830152610c9781610b2d565b9050919050565b6000602082019050610cb36000830184610b50565b92915050565b6000608082019050610cce6000830187610b50565b610cdb6020830186610a3d565b610ce86040830185610a2e565b610cf56060830184610b50565b95945050505050565b600082825260208201905092915050565b6000610d1a82610dad565b9150610d2583610dad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5a57610d59610e00565b5b828201905092915050565b6000610d7082610d8d565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610dc282610dad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df557610df4610e00565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b610fb181610d65565b8114610fbc57600080fd5b50565b610fc881610dad565b8114610fd357600080fd5b5056fea2646970667358221220b773422f09fd18d5b9cdfe5409539cd919141f1448158d0330fabe0b3371fda764736f6c63430008070033";

		MyProcessor evm;

		EvmProcessor::Word wOwner;
		memset0(wOwner.m_pData, wOwner.nBytes - 20);
		memset(wOwner.m_pData + wOwner.nBytes - 20, 0xff, 20);

		{
#pragma pack (push, 1)
			struct MyArgs
			{
				EvmProcessor::Word m_ArrMark;
				EvmProcessor::Word m_Count;
				EvmProcessor::Word m_pszName[2];
			} myArgs;
#pragma pack (pop)

			myArgs.m_ArrMark = 0x20u;
			myArgs.m_Count = _countof(myArgs.m_pszName);
			myArgs.m_pszName[0] = Zero;
			myArgs.m_pszName[1] = Zero;
			memcpy(myArgs.m_pszName[0].m_pData, "Hello", 5);
			memcpy(myArgs.m_pszName[1].m_pData, "world!", 6);

			verify_test(evm.Construct(wOwner, szCode, _countof(szCode) - 1, &myArgs, sizeof(myArgs)));
		}


		EvmProcessor::Word wVoter;
		memset0(wVoter.m_pData, wVoter.nBytes - 20);
		memset(wVoter.m_pData + wVoter.nBytes - 20, 0xee, 20);

		{
#pragma pack (push, 1)
			struct MyMethod
				:public EvmProcessor::Method
			{
				EvmProcessor::Word m_wVoter;
			} myArg;
#pragma pack (pop)

			myArg.SetSelector("giveRightToVote(address)");
			myArg.m_wVoter = wVoter;

			evm.RunMethod_T(wOwner, myArg);
			verify_test(!evm.m_RetVal.n);
		}

	}

} // namespace beam

int main()
{
	try
	{
		ECC::PseudoRandomGenerator prg;
		ECC::PseudoRandomGenerator::Scope scope(&prg);

		using namespace beam;

		beam::EvmTest1();
		beam::EvmTest2();

	}
	catch (const std::exception & ex)
	{
		printf("Expression: %s\n", ex.what());
		g_TestsFailed++;
	}

	return g_TestsFailed ? -1 : 0;
}
